// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"pkg.berachain.dev/polaris/eth/core"
	"pkg.berachain.dev/polaris/eth/core/precompile"
	"sync"
)

// Ensure, that BlackfuryHostChainMock does implement core.BlackfuryHostChain.
// If this is not the case, regenerate this file with moq.
var _ core.BlackfuryHostChain = &BlackfuryHostChainMock{}

// BlackfuryHostChainMock is a mock implementation of core.BlackfuryHostChain.
//
//	func TestSomethingThatUsesBlackfuryHostChain(t *testing.T) {
//
//		// make and configure a mocked core.BlackfuryHostChain
//		mockedBlackfuryHostChain := &BlackfuryHostChainMock{
//			GetBlockPluginFunc: func() core.BlockPlugin {
//				panic("mock out the GetBlockPlugin method")
//			},
//			GetConfigurationPluginFunc: func() core.ConfigurationPlugin {
//				panic("mock out the GetConfigurationPlugin method")
//			},
//			GetGasPluginFunc: func() core.GasPlugin {
//				panic("mock out the GetGasPlugin method")
//			},
//			GetHistoricalPluginFunc: func() core.HistoricalPlugin {
//				panic("mock out the GetHistoricalPlugin method")
//			},
//			GetPrecompilePluginFunc: func() precompile.Plugin {
//				panic("mock out the GetPrecompilePlugin method")
//			},
//			GetStatePluginFunc: func() core.StatePlugin {
//				panic("mock out the GetStatePlugin method")
//			},
//			GetTxPoolPluginFunc: func() core.TxPoolPlugin {
//				panic("mock out the GetTxPoolPlugin method")
//			},
//		}
//
//		// use mockedBlackfuryHostChain in code that requires core.BlackfuryHostChain
//		// and then make assertions.
//
//	}
type BlackfuryHostChainMock struct {
	// GetBlockPluginFunc mocks the GetBlockPlugin method.
	GetBlockPluginFunc func() core.BlockPlugin

	// GetConfigurationPluginFunc mocks the GetConfigurationPlugin method.
	GetConfigurationPluginFunc func() core.ConfigurationPlugin

	// GetGasPluginFunc mocks the GetGasPlugin method.
	GetGasPluginFunc func() core.GasPlugin

	// GetHistoricalPluginFunc mocks the GetHistoricalPlugin method.
	GetHistoricalPluginFunc func() core.HistoricalPlugin

	// GetPrecompilePluginFunc mocks the GetPrecompilePlugin method.
	GetPrecompilePluginFunc func() precompile.Plugin

	// GetStatePluginFunc mocks the GetStatePlugin method.
	GetStatePluginFunc func() core.StatePlugin

	// GetTxPoolPluginFunc mocks the GetTxPoolPlugin method.
	GetTxPoolPluginFunc func() core.TxPoolPlugin

	// calls tracks calls to the methods.
	calls struct {
		// GetBlockPlugin holds details about calls to the GetBlockPlugin method.
		GetBlockPlugin []struct {
		}
		// GetConfigurationPlugin holds details about calls to the GetConfigurationPlugin method.
		GetConfigurationPlugin []struct {
		}
		// GetGasPlugin holds details about calls to the GetGasPlugin method.
		GetGasPlugin []struct {
		}
		// GetHistoricalPlugin holds details about calls to the GetHistoricalPlugin method.
		GetHistoricalPlugin []struct {
		}
		// GetPrecompilePlugin holds details about calls to the GetPrecompilePlugin method.
		GetPrecompilePlugin []struct {
		}
		// GetStatePlugin holds details about calls to the GetStatePlugin method.
		GetStatePlugin []struct {
		}
		// GetTxPoolPlugin holds details about calls to the GetTxPoolPlugin method.
		GetTxPoolPlugin []struct {
		}
	}
	lockGetBlockPlugin         sync.RWMutex
	lockGetConfigurationPlugin sync.RWMutex
	lockGetGasPlugin           sync.RWMutex
	lockGetHistoricalPlugin    sync.RWMutex
	lockGetPrecompilePlugin    sync.RWMutex
	lockGetStatePlugin         sync.RWMutex
	lockGetTxPoolPlugin        sync.RWMutex
}

// GetBlockPlugin calls GetBlockPluginFunc.
func (mock *BlackfuryHostChainMock) GetBlockPlugin() core.BlockPlugin {
	if mock.GetBlockPluginFunc == nil {
		panic("BlackfuryHostChainMock.GetBlockPluginFunc: method is nil but BlackfuryHostChain.GetBlockPlugin was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetBlockPlugin.Lock()
	mock.calls.GetBlockPlugin = append(mock.calls.GetBlockPlugin, callInfo)
	mock.lockGetBlockPlugin.Unlock()
	return mock.GetBlockPluginFunc()
}

// GetBlockPluginCalls gets all the calls that were made to GetBlockPlugin.
// Check the length with:
//
//	len(mockedBlackfuryHostChain.GetBlockPluginCalls())
func (mock *BlackfuryHostChainMock) GetBlockPluginCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetBlockPlugin.RLock()
	calls = mock.calls.GetBlockPlugin
	mock.lockGetBlockPlugin.RUnlock()
	return calls
}

// GetConfigurationPlugin calls GetConfigurationPluginFunc.
func (mock *BlackfuryHostChainMock) GetConfigurationPlugin() core.ConfigurationPlugin {
	if mock.GetConfigurationPluginFunc == nil {
		panic("BlackfuryHostChainMock.GetConfigurationPluginFunc: method is nil but BlackfuryHostChain.GetConfigurationPlugin was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetConfigurationPlugin.Lock()
	mock.calls.GetConfigurationPlugin = append(mock.calls.GetConfigurationPlugin, callInfo)
	mock.lockGetConfigurationPlugin.Unlock()
	return mock.GetConfigurationPluginFunc()
}

// GetConfigurationPluginCalls gets all the calls that were made to GetConfigurationPlugin.
// Check the length with:
//
//	len(mockedBlackfuryHostChain.GetConfigurationPluginCalls())
func (mock *BlackfuryHostChainMock) GetConfigurationPluginCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetConfigurationPlugin.RLock()
	calls = mock.calls.GetConfigurationPlugin
	mock.lockGetConfigurationPlugin.RUnlock()
	return calls
}

// GetGasPlugin calls GetGasPluginFunc.
func (mock *BlackfuryHostChainMock) GetGasPlugin() core.GasPlugin {
	if mock.GetGasPluginFunc == nil {
		panic("BlackfuryHostChainMock.GetGasPluginFunc: method is nil but BlackfuryHostChain.GetGasPlugin was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetGasPlugin.Lock()
	mock.calls.GetGasPlugin = append(mock.calls.GetGasPlugin, callInfo)
	mock.lockGetGasPlugin.Unlock()
	return mock.GetGasPluginFunc()
}

// GetGasPluginCalls gets all the calls that were made to GetGasPlugin.
// Check the length with:
//
//	len(mockedBlackfuryHostChain.GetGasPluginCalls())
func (mock *BlackfuryHostChainMock) GetGasPluginCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetGasPlugin.RLock()
	calls = mock.calls.GetGasPlugin
	mock.lockGetGasPlugin.RUnlock()
	return calls
}

// GetHistoricalPlugin calls GetHistoricalPluginFunc.
func (mock *BlackfuryHostChainMock) GetHistoricalPlugin() core.HistoricalPlugin {
	if mock.GetHistoricalPluginFunc == nil {
		panic("BlackfuryHostChainMock.GetHistoricalPluginFunc: method is nil but BlackfuryHostChain.GetHistoricalPlugin was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetHistoricalPlugin.Lock()
	mock.calls.GetHistoricalPlugin = append(mock.calls.GetHistoricalPlugin, callInfo)
	mock.lockGetHistoricalPlugin.Unlock()
	return mock.GetHistoricalPluginFunc()
}

// GetHistoricalPluginCalls gets all the calls that were made to GetHistoricalPlugin.
// Check the length with:
//
//	len(mockedBlackfuryHostChain.GetHistoricalPluginCalls())
func (mock *BlackfuryHostChainMock) GetHistoricalPluginCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetHistoricalPlugin.RLock()
	calls = mock.calls.GetHistoricalPlugin
	mock.lockGetHistoricalPlugin.RUnlock()
	return calls
}

// GetPrecompilePlugin calls GetPrecompilePluginFunc.
func (mock *BlackfuryHostChainMock) GetPrecompilePlugin() precompile.Plugin {
	if mock.GetPrecompilePluginFunc == nil {
		panic("BlackfuryHostChainMock.GetPrecompilePluginFunc: method is nil but BlackfuryHostChain.GetPrecompilePlugin was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetPrecompilePlugin.Lock()
	mock.calls.GetPrecompilePlugin = append(mock.calls.GetPrecompilePlugin, callInfo)
	mock.lockGetPrecompilePlugin.Unlock()
	return mock.GetPrecompilePluginFunc()
}

// GetPrecompilePluginCalls gets all the calls that were made to GetPrecompilePlugin.
// Check the length with:
//
//	len(mockedBlackfuryHostChain.GetPrecompilePluginCalls())
func (mock *BlackfuryHostChainMock) GetPrecompilePluginCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetPrecompilePlugin.RLock()
	calls = mock.calls.GetPrecompilePlugin
	mock.lockGetPrecompilePlugin.RUnlock()
	return calls
}

// GetStatePlugin calls GetStatePluginFunc.
func (mock *BlackfuryHostChainMock) GetStatePlugin() core.StatePlugin {
	if mock.GetStatePluginFunc == nil {
		panic("BlackfuryHostChainMock.GetStatePluginFunc: method is nil but BlackfuryHostChain.GetStatePlugin was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetStatePlugin.Lock()
	mock.calls.GetStatePlugin = append(mock.calls.GetStatePlugin, callInfo)
	mock.lockGetStatePlugin.Unlock()
	return mock.GetStatePluginFunc()
}

// GetStatePluginCalls gets all the calls that were made to GetStatePlugin.
// Check the length with:
//
//	len(mockedBlackfuryHostChain.GetStatePluginCalls())
func (mock *BlackfuryHostChainMock) GetStatePluginCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetStatePlugin.RLock()
	calls = mock.calls.GetStatePlugin
	mock.lockGetStatePlugin.RUnlock()
	return calls
}

// GetTxPoolPlugin calls GetTxPoolPluginFunc.
func (mock *BlackfuryHostChainMock) GetTxPoolPlugin() core.TxPoolPlugin {
	if mock.GetTxPoolPluginFunc == nil {
		panic("BlackfuryHostChainMock.GetTxPoolPluginFunc: method is nil but BlackfuryHostChain.GetTxPoolPlugin was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetTxPoolPlugin.Lock()
	mock.calls.GetTxPoolPlugin = append(mock.calls.GetTxPoolPlugin, callInfo)
	mock.lockGetTxPoolPlugin.Unlock()
	return mock.GetTxPoolPluginFunc()
}

// GetTxPoolPluginCalls gets all the calls that were made to GetTxPoolPlugin.
// Check the length with:
//
//	len(mockedBlackfuryHostChain.GetTxPoolPluginCalls())
func (mock *BlackfuryHostChainMock) GetTxPoolPluginCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetTxPoolPlugin.RLock()
	calls = mock.calls.GetTxPoolPlugin
	mock.lockGetTxPoolPlugin.RUnlock()
	return calls
}
